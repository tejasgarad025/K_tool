[11:29 AM, 3/29/2025] Saiesh Gaonkar: Serializer
[11:29 AM, 3/29/2025] Saiesh Gaonkar: from djoser.serializers import UserCreateSerializer
from django.contrib.auth import get_user_model

User = get_user_model()

class UserCreateSerializer(UserCreateSerializer):
    class Meta(UserCreateSerializer.Meta):
        model = User
        fields = ['id', 'email', 'first_name', 'last_name', 'password']
[11:30 AM, 3/29/2025] Saiesh Gaonkar: urls
[11:30 AM, 3/29/2025] Saiesh Gaonkar: from django.contrib import admin
from django.urls import path, include, re_path
from django.views.generic import TemplateView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('auth/',include('djoser.urls')),
    path('auth/',include('djoser.urls.jwt')),
]

#Add index page of react app for re-routing 
urlpatterns += [re_path(r'^.*',TemplateView.as_view('index.html'))]
[11:30 AM, 3/29/2025] Siddhant: He tu kela te mre?
[11:30 AM, 3/29/2025] Saiesh Gaonkar: hoi
[11:30 AM, 3/29/2025] Siddhant: Ha
[11:31 AM, 3/29/2025] Saiesh Gaonkar: model
[11:31 AM, 3/29/2025] Saiesh Gaonkar: from django.db import models
from django.contrib.auth.models import AbstractUser, BaseUserManager,PermissionsMixin

class UserAccountManager(BaseUserManager):
    def create_user(self, email, first_name, last_name, password=None):
        if not email:
            raise ValueError('Users must have an email address')
        
        email = self.normalize_email(email)
        user = self.model(email=email, first_name=first_name, last_name=last_name)

        user.set_password(password)
        user.save()

        return user

class UserAccount(AbstractUser,PermissionsMixin):
    email = models.EmailField(max_length=255, unique=True)
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = UserAccountManager()

    USERNAME_FIELD ='email'
    REQUIRED_FIELDS = ['first_name', 'last_name']

    def get_full_name(self):
        return f"{self.first_name} {self.last_name}"
    
    def get_short_name(self):
        return self.first_name
    
    def _str_(self):
        return self.email
[11:32 AM, 3/29/2025] Saiesh Gaonkar: fakta views.py kai ghalu na haven because thai react pages ghalpak zai nu te karu na
[11:33 AM, 3/29/2025] Saiesh Gaonkar: settings .py assa te bin changes karpak zai
[11:35 AM, 3/29/2025] Saiesh Gaonkar: EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'saiesh1234@gmail.com' 
EMAIL_HOST_PASSWORD = '12345678' 
EMAIL_USE_TLS = True
[11:36 AM, 3/29/2025] Saiesh Gaonkar: REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}
    
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=5),
    'AUTH_HEADER_TYPE': ('JWT',),
}

DJOSER ={
    'LOGIN_FIELD':'email',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'USERNAME_CHANGED_EMAIL_CONFIRMATION': True,
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    'SEND_CONFIRMATION_EMAIL': True,
    'SET_USERNAME_RETYPE': True,
    'SET_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_CONFIRM_URL': 'password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': 'email/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': 'activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,
    'SERIALIZERS':{
        'user_create': 'accounts.serializers.UserCreateSerializer',
        'user': 'accounts.serializers.UserSerializer',
        'user_delete': 'djoser.serializers.UserDeleteSerializer',
    }
}

AUTH_USER_MODEL = 'accounts.UserAccount'